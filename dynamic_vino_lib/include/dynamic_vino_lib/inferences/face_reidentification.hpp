// Copyright (c) 2018 Intel Corporation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @brief A header file with declaration for FaceReidentification Class
 * @file face_reidentification.hpp
 */
#ifndef DYNAMIC_VINO_LIB__INFERENCES__FACE_REIDENTIFICATION_HPP_
#define DYNAMIC_VINO_LIB__INFERENCES__FACE_REIDENTIFICATION_HPP_
#include <rclcpp/rclcpp.hpp>
#include <memory>
#include <vector>
#include <string>
#include "dynamic_vino_lib/models/face_reidentification_model.hpp"
#include "dynamic_vino_lib/engines/engine.hpp"
#include "dynamic_vino_lib/inferences/base_inference.hpp"
#include "inference_engine.hpp"
#include "opencv2/opencv.hpp"
// namespace
namespace dynamic_vino_lib
{
/**
 * @class FaceReidentificationResult
 * @brief Class for storing and processing face reidentification result.
 */
class FaceReidentificationResult : public Result
{
public:
  friend class FaceReidentification;
  explicit FaceReidentificationResult(const cv::Rect & location);
  std::string getFaceID() const {return face_id_;}

private:
  std::string face_id_ = "No.#";
};


class FaceTracker
{
public:
  explicit FaceTracker(int, double, double);
  /**
   * @brief Process the new detected face.
   * @param[in] feature The new detected face feature.
   * @return The detected face ID.
   */
  int processNewTrack(const std::vector<float>& feature);

private:
  /**
   * @brief Find the matched track from the recorded tracks.
   * @param[in] feature The input track's feature.
   * @return The matched track ID, -1 if it's not matched.
   */
  int findMatchTrack(const std::vector<float>& feature);
  /**
   * @brief Update the matched track's feature by the new track.
   * @param[in] track_id The matched track ID.
   * @param[in] feature The matched track's feature
   */
  void updateMatchTrack(int track_id, const std::vector<float>& feature);
  /**
   * @brief Update the recorded tracks' lost.
   */
  void updateAllTracksLost();
  /**
   * @brief Remove the old tracks from the recorded tracks.
   */
  void removeOldTracks();
  /**
   * @brief Add a new track to the recorded tracks.
   * @param[in] feature A track's feature.
   */
  void addNewTrack(const std::vector<float>& feature);
  /**
   * @brief Calculate the cosine similarity between two features.
   * @return The simlarity result.
   */
  double calcSimilarity(
    const std::vector<float> & feature_a, const std::vector<float> & feature_b);

  struct Track
  {
    int lost;
    std::vector<float> feature;
  };
  
  int drop_lost_thresh_ = 10000;
  int max_track_id_ = -1;
  double max_match_similarity_ = 0;
  double same_track_thresh_ = 0.8;
  double new_track_thresh_ = 0.4;
  std::unordered_map<int, Track> recorded_tracks_;
};

/**
 * @class FaceReidentification
 * @brief Class to load face reidentification model and perform face reidentification.
 */
class FaceReidentification : public BaseInference
{
public:
  using Result = dynamic_vino_lib::FaceReidentificationResult;
  explicit FaceReidentification(double);
  ~FaceReidentification() override;
  /**
   * @brief Load the face reidentification model.
   */
  void loadNetwork(std::shared_ptr<Models::FaceReidentificationModel>);
  /**
   * @brief Enqueue a frame to this class.
   * The frame will be buffered but not infered yet.
   * @param[in] frame The frame to be enqueued.
   * @param[in] input_frame_loc The location of the enqueued frame with respect
   * to the frame generated by the input device.
   * @return Whether this operation is successful.
   */
  bool enqueue(const cv::Mat &, const cv::Rect &) override;
  /**
   * @brief Start inference for all buffered frames.
   * @return Whether this operation is successful.
   */
  bool submitRequest() override;
  /**
   * @brief This function will fetch the results of the previous inference and
   * stores the results in a result buffer array. All buffered frames will be
   * cleared.
   * @return Whether the Inference object fetches a result this time
   */
  bool fetchResults() override;
  /**
   * @brief Get the length of the buffer result array.
   * @return The length of the buffer result array.
   */
  const int getResultsLength() const override;
  /**
   * @brief Get the location of result with respect
   * to the frame generated by the input device.
   * @param[in] idx The index of the result.
   */
  const dynamic_vino_lib::Result * getLocationResult(int idx) const override;
  /**
   * @brief Show the observed reidentification result either through image window
     or ROS topic.
   */
  const void observeOutput(const std::shared_ptr<Outputs::BaseOutput> & output);
  /**
   * @brief Get the name of the Inference instance.
   * @return The name of the Inference instance.
   */
  const std::string getName() const override;
  float calcSimilarity(const std::vector<float> & face_a, const std::vector<float> & face_b);
  std::string findMatchFace(const std::vector<float> & new_face);

private:
  std::shared_ptr<Models::FaceReidentificationModel> valid_model_;
  std::vector<Result> results_;
  std::shared_ptr<dynamic_vino_lib::FaceTracker> face_tracker_;
  std::vector<std::vector<float>> recorded_faces_;
  double match_thresh_ = 0;
};
}  // namespace dynamic_vino_lib
#endif  // DYNAMIC_VINO_LIB__INFERENCES__FACE_REIDENTIFICATION_HPP_
